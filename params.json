{"tagline":"Narf is a framework for creating a basic Node.js Web Server with easy implementation of JSON APIs and serving of static pages.","body":"NARF \r\n====\r\n\r\nNarf is a basic framework for creating a JSON API with node , it currently supports both GET and POST as well as web sockets.\r\n\r\nThe idea with NARF is that all you have to do for GET, POST and Socket is put the functions you want exposed in a particular object and everything else will be handled for you. For GET and POST data is returned to the client by either a return statement (not recommended) or by use of the ret( [object data] ) function.\r\n\r\n## Usage\r\n\r\n### Installation \r\n\r\n\tnpm install narf\r\n\r\nIf you want command line functionality then the following is suggested:\r\n\r\n\tsudo npm install -g narf\r\n\t\r\n#### Stability\r\n\r\nNarf is under continuous development and is therefore subject to API changes, luckily npm allows for version specification, if you wish to use an older version of narf \r\nsimply use: \r\n\r\n\tnpm install narf@x.x.x\r\n\r\n### Setup\r\n\r\nTo create a narf server all you need is to create an object with your GET and POST functions, if you wish to return an object to the client simply use a return statement to return a valid javascript object , if you do not return an object a default object will be returned as specified in lib/config.json under \"default_return\". After you create your functions, simply import the narf library and run narf.startHTTPServer( APIFunctions ).\r\n\r\n## Functions\r\n\r\n\tnarf.configure()\r\n\r\n\tnarf.startHTTPServer()\r\n\r\n\tnarf.startSocketServer()\r\n\r\n\tnarf.narfSocketServer()\r\n\r\n\tnarf.pageServer()\r\n\r\n\r\n## Configuration:\r\n### narf.configure()\r\n\r\nThe default configuration for the server is located in lib/config.json and looks like the following:\r\n\r\n    {\r\n\t  \"debug\" : true,\r\n\t  \"port\" : 8080,\r\n\t  \"auto_port_min\" : 8000,\r\n\t  \"auto_port_max\" : 8100,\r\n\r\n\t  \"https\" : false,\r\n\t  \"key_path\" : \"./key.pem\",\r\n\t  \"cert_path\" : \"./cert.pem\",\r\n\r\n\t  \"limit_post_size\" : true,\r\n\t  \"post_size_limit\" : 1e6,\r\n\t  \"url_selection\" : true,\r\n\t  \"asc\" : true,\r\n\t  \"socket_protocol\" : null\r\n\t}\r\n    \r\nBy defualt it covers the server port , a post \r\nbody size limit and an option to remove the limit as well as a bool value to determine if the client should\r\nbe able to select serverfunction via the url.\r\n\r\nYou can modiy the configuration using narf.configure() by loading another configuration file :\r\n\r\n\tnarf.configure( require( './config' ) );\r\n\r\nor just resetting the values you wish to change:\r\n\r\n\tnarf.configure( {\r\n\r\n\t\t\"port\" : \"auto\"\r\n\r\n\t} ).then( ... );\r\n\r\nNote: It is always a good idea to use narf.configure( ... ).then( function(value){ ...startHTTP here... } ) due to the \r\nasynchronous nature of javascript. \r\n\r\nYou can also generate a config file by typing the following into your terminal:\r\n\t\r\n\tnarf configure\r\n\r\nor:\r\n\r\n\tnarf -c\r\n\r\n#### port\r\n\r\nThe port property lets you assign the NARF server to a port, alternatively you can use the value \"auto\" and then set the auto_port_min and auto_port_max appropriately to have narf automatically assign itself a port.\r\n\r\n#### Authentication\r\n\r\nAuthentication can be set up on a narf api by setting the value of auth_function , the function should accept a\r\nrequest and url_object as parameters and utilise q for promises , eg:\r\n\r\n\tfunction authentication_function( request, url_object ){\r\n\r\n\t\tvar deferred = q.defer();\r\n\t\tconsole.log( request.headers );\r\n\t\tvar api_key = '50e85fe18e17e3616774637a82968f4c';\r\n\r\n\t\tif ( request.headers.key ){\r\n\r\n\t\t\tif( request.headers.key === api_key )\r\n\t\t\t\tdeferred.resolve( true );\r\n\t\t\telse\r\n\t\t\t\tdeferred.resolve( false );\r\n\t\t}\r\n\t\telse if ( url_object.key ){\r\n\r\n\t\t\tif( request.headers.key === api_key )\r\n\t\t\t\tdeferred.resolve( true );\r\n\t\t\telse\r\n\t\t\t\tdeferred.resolve( false );\r\n\t\t}\r\n\t\telse\r\n\t\t\tdeferred.resolve( false );\r\n\r\n\t\treturn deferred.promise;\r\n\t}\r\n\r\n\tnarf.configure( {\r\n\r\n\t\tauth_function : authentication_function\r\n\t} )\r\n\r\n\r\n## HTTP Server\r\n### narf.startHTTPServer()\r\n\r\nBelow is an example of a simple narf HTTP server, in just these few lines , you can get a server running with GET and POST functionality:\r\n\r\n\tvar narf = require( 'narf' );\r\n\r\n\tvar APIFunctions = {\r\n\r\n\t\tGET : {  //headers object, parsed url and return callback are passed as a parameter for get functions\r\n\r\n\t\t\tloopBack : function( headers, url, ret ){\r\n\t\t\t\t\t\r\n\t\t\t\tret( { 'headers' : headers, 'parsedURL' : url } );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tPOST : {  //post body is passed as a parameter for POST functions\r\n\r\n\t\t\tloopBack : function( body, url, ret ){\r\n\r\n\t\t\t\tret( body );\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tnarf.startHTTPServer( APIFunctions );\r\n\t\r\n## Sockets \r\n### narf.startSocketServer() / narf.narfScoketServer()\r\n\r\nIf you want to add socket functionality to your HTTP server , pass a callback function to handle it as follows:\r\n\r\n\tnarf.startHTTPServer( APIFunctions, function( httpServer ){\r\n\t\r\n\t\tnarf.startSocketServer( httpServer, function( request ){ ... } );\r\n\t} );\r\nFirst the HTTP server is passed to the callback function in startHTTPServer(). Then the request in the socket server is passed to the callback function in startSocketServer() , from there , you have control to accept the request \r\nand do the rest of the processing.\r\n\r\n\r\nThere are two types of socket servers \r\n\r\n\tnarf.startSocketServer( httpserver, function( request ){ ... } )\r\n\r\nand \r\n\r\n\tnarf.narfSocketServer( httpServer, SocketFunctions, function( request ){ ... } )\r\n\r\nnarf.startSocketServer() creates a socket server and then responsibility is passed on you.\r\n\r\nnarf.narfSocketServer() however is similar to startHTTPServer in that you pass a set of public functions\r\nthat will be exposed to the client, a parsed message data object and the connection are passed to these functions, the example below is a socket server that updates a text field on all clients:\r\n\r\n\tvar narf = require( 'narf' );\r\n\t\r\n\t/* Starting an http server and then attaching a socket server */\r\n\tnarf.startHTTPServer( null, function( httpServer ){\r\n\t\t\r\n\t\tvar SocketFunctions = {\r\n\r\n\t\t\tupdateAll : function( messageData, conn ){\r\n\r\n\t\t\t\tif( messageData.message ){\r\n\r\n\t\t\t\t\tnarf.getConnectedClients().forEach( function( connection ){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (conn != connection)\r\n\t\t\t\t\t\t\tconnection.send( JSON.stringify( { message : messageData.message } ) );\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconnection.send( JSON.stringify( { message : '' } ) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\tnarf.narfSocketServer( httpServer, SocketFunctions, function( request ){\r\n\t\t\treturn true;\r\n\t\t} );\r\n\t} );\r\n\r\nYou can fetch a list of connected clients by calling:\r\n\r\n\tnarf.getConnectedClients()\r\n\r\n\r\n\r\n## Static pages:\r\n### narf.pageServer()\r\n\r\nWith narf.pageServer() you can serve static pages on a specified port. To start a page server simply call the narf.pageServer function and pass in a configuration object containting the port and path properties, port sets the port number for the web server and path sets the path to the directory from which you wish to serve static pages.\r\n\r\neg:\r\n\r\n\tnarf.pageServer( {\r\n\r\n\t\tport : 8080,\r\n\t\tpath :  __dirname + '/www_root',\r\n\t\terror_page : 'err.html'\r\n\t} );\r\n\r\nThe error_page parameter is optional, the server will route the user to this page in the event of a 404, it this property is left out, the default narf error page will appear.\r\n\r\n## Example.js\r\n\r\nExamples of narf implementation can be found in examples/ or on the narf <a href=\"https://github.com/divanvisagie/NARF/wiki/Usage-Examples\">wiki</a>.\r\n\r\n## Configurable Functionality\r\n\r\n### POST Body Limit\r\n\r\nBy default POST will only accept data shorter than 1e6 in length for security purposes , this\r\nconstraint may be modified or disabled in lib/config.json\r\n\r\n### HTTPS\r\n\r\nHTTPS is switched off by default in the config due to its requirements, if you wish to switch it on you will need to provide the relative paths to your key and certificate files.\r\n\r\nIf you want to create your own files for testing you can run generate_cert.sh( only tested on OSX ), but these certificates will be viewed as untrusted.\r\n\r\nto generate a generate_cert.sh file run the following command:\r\n\r\n\tnarf generate\r\nor:\r\n\r\n    narf -g\r\n\r\n## Testing\r\n\r\nUnit tests for narf are located in the tests directory , to run:\r\n\r\n\tnode ./tests/test.js \r\n\r\nor:\r\n\r\n\tnpm test narf\r\n\r\n## Compatibility\r\n\r\nNARF is only tested under OSX but should run smoothly on other platforms\r\n\r\n## License \r\n\r\n### MIT License\r\n\r\nCopyright (C) 2012 Divan Visagie\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Narf"}